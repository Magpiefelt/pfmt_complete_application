version: "3.9"

services:
  # PostgreSQL database with initialization
  db:
    image: postgres:16-alpine
    container_name: pfmt_db_dev
    restart: unless-stopped
    env_file: ./.env
    environment:
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - pfmt_db_data:/var/lib/postgresql/data
      # Initialize with schema and seed data
      - ../database/schema.sql:/docker-entrypoint-initdb.d/01_schema.sql:ro
      - ../database/seeds/001_phase1_sample_data.sql:/docker-entrypoint-initdb.d/02_seed.sql:ro
      - ../database/approval_audit_schema.sql:/docker-entrypoint-initdb.d/03_approval_audit_schema.sql:ro
      - ../database/financial_management_schema.sql:/docker-entrypoint-initdb.d/04_financial_management_schema.sql:ro
      - ../database/vendor_management_schema.sql:/docker-entrypoint-initdb.d/05_vendor_management_schema.sql:ro
      - ../database/wizard_schema.sql:/docker-entrypoint-initdb.d/06_wizard_schema.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-pfmt} -d ${POSTGRES_DB:-pfmt}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - pfmt-network

  # Development backend with hot-reloading
  backend:
    build:
      context: ..
      dockerfile: ./docker/backend.Dockerfile
      target: base
    container_name: pfmt_backend_dev
    restart: unless-stopped
    env_file: ./.env
    environment:
      NODE_ENV: development
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-pfmt}
      DB_USER: ${POSTGRES_USER:-pfmt}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-pfmt}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ../backend:/app:cached
      # Preserve node_modules
      - backend_node_modules:/app/node_modules
      # Mount uploads directory
      - uploads_data:/app/uploads
    working_dir: /app
    command: ["sh", "-c", "npm install && npm run dev"]
    networks:
      - pfmt-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Development frontend with Vite HMR
  frontend:
    build:
      context: ..
      dockerfile: ./docker/frontend.Dockerfile
      target: base
    container_name: pfmt_frontend_dev
    restart: unless-stopped
    env_file: ./.env
    environment:
      VITE_API_BASE_URL: http://localhost:3000/api
    ports:
      - "5173:5173"
    volumes:
      # Mount source code for hot reload
      - ../frontend:/app:cached
      # Preserve node_modules
      - frontend_node_modules:/app/node_modules
    working_dir: /app
    command: ["sh", "-c", "npm install && npm run dev -- --host 0.0.0.0 --port 5173"]
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - pfmt-network

  # pgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:8.9
    container_name: pfmt_pgadmin_dev
    restart: unless-stopped
    env_file: ./.env
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - pfmt-network

networks:
  pfmt-network:
    driver: bridge
    name: pfmt-dev-network

volumes:
  pfmt_db_data:
    name: pfmt-db-dev-data
  backend_node_modules:
    name: pfmt-backend-dev-modules
  frontend_node_modules:
    name: pfmt-frontend-dev-modules
  uploads_data:
    name: pfmt-uploads-dev-data
  pgadmin_data:
    name: pfmt-pgadmin-dev-data

