const nodemailer = require('nodemailer');

/**
 * Create email template for meeting invitations
 */
function createEmailTemplate(meetingData, attendee, isRequired = true) {
    // Format the meeting date and time
    const meetingDateTime = new Date(`${meetingData.meetingDate} ${meetingData.meetingTime}`);
    const formattedDate = meetingDateTime.toLocaleDateString('en-US', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
    const formattedTime = meetingDateTime.toLocaleTimeString('en-US', {
        hour: 'numeric',
        minute: '2-digit',
        hour12: true
    });

    // Determine attendance requirement
    const attendanceStatus = isRequired ? "Required" : "Optional";
    
    // Create the email content
    const subject = `Gate Meeting Invitation: ${meetingData.projectName} - ${meetingData.gateType}`;
    
    const htmlBody = `
    <!DOCTYPE html>
    <html>
    <head>
        <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background-color: #f8f9fa; padding: 20px; border-left: 4px solid #007bff; }
            .content { padding: 20px; }
            .meeting-details { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }
            .attendee-info { background-color: #e9ecef; padding: 10px; border-radius: 5px; margin: 10px 0; }
            .required { color: #dc3545; font-weight: bold; }
            .optional { color: #6c757d; font-weight: bold; }
            .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #dee2e6; font-size: 0.9em; color: #6c757d; }
        </style>
    </head>
    <body>
        <div class="header">
            <h2>Gate Meeting Invitation</h2>
            <p><strong>Project:</strong> ${meetingData.projectName}</p>
            <p><strong>Gate Type:</strong> ${meetingData.gateType}</p>
        </div>
        
        <div class="content">
            <p>Dear ${attendee.name},</p>
            
            <p>You are invited to attend a gate meeting for the above-mentioned project. Your participation is marked as <span class="${isRequired ? 'required' : 'optional'}">${attendanceStatus}</span>.</p>
            
            <div class="meeting-details">
                <h3>Meeting Details</h3>
                <p><strong>Date:</strong> ${formattedDate}</p>
                <p><strong>Time:</strong> ${formattedTime}</p>
                <p><strong>Location:</strong> ${meetingData.location}</p>
                ${meetingData.description ? `<p><strong>Description:</strong> ${meetingData.description}</p>` : ''}
            </div>
            
            <div class="attendee-info">
                <h4>Your Role in this Meeting</h4>
                <p><strong>Role:</strong> ${attendee.role}</p>
                <p><strong>Attendance:</strong> <span class="${isRequired ? 'required' : 'optional'}">${attendanceStatus}</span></p>
            </div>
            
            <h4>Important Notes:</h4>
            <ul>
                <li>Please confirm your attendance by responding to this email</li>
                <li>Presentation materials will be shared at least 2 business days before the meeting</li>
                <li>If you cannot attend, please arrange for an appropriate delegate</li>
                <li>For any questions, please contact the Administrative Assistant or Project Manager</li>
            </ul>
            
            ${(meetingData.projectDirector || meetingData.projectManager || meetingData.administrativeAssistant) ? '<p><strong>Key Personnel:</strong></p><ul>' : ''}
            ${meetingData.projectDirector ? `<li>Project Director: ${meetingData.projectDirector}</li>` : ''}
            ${meetingData.projectManager ? `<li>Project Manager: ${meetingData.projectManager}</li>` : ''}
            ${meetingData.administrativeAssistant ? `<li>Administrative Assistant: ${meetingData.administrativeAssistant}</li>` : ''}
            ${(meetingData.projectDirector || meetingData.projectManager || meetingData.administrativeAssistant) ? '</ul>' : ''}
            
            <p>Thank you for your participation in this important project milestone.</p>
            
            <p>Best regards,<br>
            Project Management Team</p>
        </div>
        
        <div class="footer">
            <p><em>This is an automated invitation generated by the Gate Meeting Invitation System.</em></p>
            <p><em>Meeting scheduled at least 2-3 weeks in advance as per gate meeting guidelines.</em></p>
        </div>
    </body>
    </html>
    `;
    
    return { subject, htmlBody };
}

/**
 * Send email using nodemailer (for demo purposes, we'll log the email instead)
 */
async function sendEmail(toEmail, subject, htmlBody, smtpConfig = null) {
    try {
        // For demo purposes, we'll log the email instead of actually sending it
        console.log('=== EMAIL SENT ===');
        console.log(`To: ${toEmail}`);
        console.log(`Subject: ${subject}`);
        console.log(`Body: ${htmlBody.substring(0, 200)}...`);
        console.log('=== END EMAIL ===');
        
        // Uncomment and configure the following for actual email sending:
        /*
        if (smtpConfig) {
            const transporter = nodemailer.createTransporter({
                host: smtpConfig.host || 'smtp.gmail.com',
                port: smtpConfig.port || 587,
                secure: false,
                auth: {
                    user: smtpConfig.username,
                    pass: smtpConfig.password
                }
            });

            const mailOptions = {
                from: smtpConfig.username,
                to: toEmail,
                subject: subject,
                html: htmlBody
            };

            await transporter.sendMail(mailOptions);
        }
        */
        
        return true;
    } catch (error) {
        console.error(`Failed to send email to ${toEmail}:`, error.message);
        return false;
    }
}

/**
 * Handle meeting invitation form submission and send emails
 */
const sendMeetingInvitation = async (req, res) => {
    try {
        const data = req.body;
        
        // Validate required fields
        const requiredFields = ['projectName', 'gateType', 'meetingDate', 'meetingTime', 'location', 'attendees'];
        for (const field of requiredFields) {
            if (!data[field]) {
                return res.status(400).json({ 
                    error: `Missing required field: ${field}` 
                });
            }
        }
        
        // Log the meeting invitation request
        console.log(`Processing meeting invitation for: ${data.projectName} - ${data.gateType}`);
        
        // Send emails to all attendees
        const sentEmails = [];
        const failedEmails = [];
        
        for (const attendee of data.attendees) {
            try {
                const { subject, htmlBody } = createEmailTemplate(data, attendee, attendee.required || true);
                
                // Send the email
                if (await sendEmail(attendee.email, subject, htmlBody)) {
                    sentEmails.push({
                        email: attendee.email,
                        name: attendee.name,
                        role: attendee.role,
                        required: attendee.required || true
                    });
                } else {
                    failedEmails.push(attendee.email);
                }
                
            } catch (error) {
                console.error(`Error processing attendee ${attendee.email || 'unknown'}:`, error.message);
                failedEmails.push(attendee.email || 'unknown');
            }
        }
        
        // Prepare response
        const responseData = {
            success: true,
            message: `Meeting invitations processed for ${data.projectName}`,
            meeting_details: {
                project_name: data.projectName,
                gate_type: data.gateType,
                meeting_date: data.meetingDate,
                meeting_time: data.meetingTime,
                location: data.location
            },
            email_summary: {
                total_attendees: data.attendees.length,
                emails_sent: sentEmails.length,
                emails_failed: failedEmails.length,
                sent_to: sentEmails,
                failed_emails: failedEmails
            }
        };
        
        if (failedEmails.length > 0) {
            responseData.warning = `Some emails failed to send: ${failedEmails.join(', ')}`;
        }
        
        res.status(200).json(responseData);
        
    } catch (error) {
        console.error('Error processing meeting invitation:', error.message);
        res.status(500).json({
            error: 'Failed to process meeting invitation',
            details: error.message
        });
    }
};

/**
 * Preview the email template without sending
 */
const previewInvitation = async (req, res) => {
    try {
        const data = req.body;
        
        // Create a sample attendee for preview
        const sampleAttendee = {
            name: 'Sample Attendee',
            email: 'sample@example.com',
            role: 'Sample Role'
        };
        
        const { subject, htmlBody } = createEmailTemplate(data, sampleAttendee, true);
        
        res.status(200).json({
            success: true,
            preview: {
                subject: subject,
                html_body: htmlBody
            }
        });
        
    } catch (error) {
        console.error('Error creating email preview:', error.message);
        res.status(500).json({
            error: 'Failed to create email preview',
            details: error.message
        });
    }
};

/**
 * Health check endpoint
 */
const healthCheck = (req, res) => {
    res.status(200).json({
        status: 'healthy',
        service: 'Gate Meeting Invitation System',
        timestamp: new Date().toISOString()
    });
};

module.exports = {
    sendMeetingInvitation,
    previewInvitation,
    healthCheck
};

